@page "/signup"
@layout PageLayout
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<PageHeader pageTitle="Signup" />
<hr>
<EditForm Model="signup" OnValidSubmit="ValidateUser">
    <DataAnnotationsValidator />
    <div class="input-box">
        <div class="form-floating mt-3">
            <InputText @bind-Value="signup.Name" class="form-control" id="name" placeholder="name" />
            <label for="name">Name</label>
        </div>
        <ValidationMessage For="() => signup.Name" />
    </div>
    <div class="input-box">
        <div class="form-floating mt-3">
            <InputText @bind-Value="signup.Email" class="form-control" id="email" placeholder="name@example.com" />
            <label for="email">Email</label>
        </div>
        <ValidationMessage For="() => signup.Email" />
    </div>
    <div class="input-box">
        <div class="form-floating mt-3">
            <InputText type="password" @bind-Value="signup.Password" class="form-control" id="pw" placeholder="Password" />
            <label for="pw">Password</label>
        </div>
        <ValidationMessage For="() => signup.Password" />
    </div>
    <div class="input-box">
        <div class="form-floating mt-3">
            <InputText type="password" @bind-Value="signup.ConfirmPassword" class="form-control" id="cpw" placeholder="Confirm Password" />
            <label for="cpw">Confirm Password</label>
        </div>
        <ValidationMessage For="() => signup.ConfirmPassword" />
    </div>
    <div class="form-controls">
        <input type="submit" class="btn btn-primary-filled" value="Create Account" />
    </div>
</EditForm>

@code {
    [CascadingParameter]
    public StateModel state { get; set; }

    [CascadingParameter]
    public UserModel user { get; set; }

    private SignupModel signup;

    protected override void OnInitialized()
    {
        state.ShowNav = true;
        signup = new SignupModel();
        base.OnInitialized();
    }

    private async Task<bool> ValidateUser()
    {
        ((TravelAuthenticationStateProvider)authenticationStateProvider).NotifyUserAuthentication(signup.Email);
        state.isGuest = false;
        state.ShowNav = true;
        state.OnTab = 1;
        user.DisplayName = signup.Name;
        user.Email = signup.Email;
        user.Password = signup.Password;
        navigationManager.NavigateTo("/explore");
        await sessionStorage.SetItemAsync("email", user.Email);
        return await Task.FromResult(true);
    }
}