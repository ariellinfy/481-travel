@page "/bookmarks"
@layout PageLayout
@inject PageHistoryState PageHistoryState

<AuthorizeView>
    <Authorized>
        <PageHeader pageTitle="Bookmarks" />
        <div class="page-body">
            @if (user.Bookmarks.Count != 0)
            {
                <RadzenTabs TabPosition="@tabPosition" RenderMode="TabRenderMode.Client">
                    <Tabs>
                        <RadzenTabsItem Text="Amenity">
                            <div class="tab-container">
                                @for (int i = 0; i < AmenityBookmarks.Count; i++)
                                {
                                    <BookmarkCardAmenity BookmarkedAmenity="@AmenityBookmarks[i]" placeIndex="@i" UnbookmarkItem="@UnbookmarkAmenityCallBack" />
                                }
                            </div>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Event">
                            <div class="tab-container">
                                @for (int i = 0; i < EventBookmarks.Count; i++)
                                {
                                    <BookmarkCardEvent BookmarkedEvent="@EventBookmarks[i]" placeIndex="@i" UnbookmarkItem="@UnbookmarkEventCallBack" />
                                }
                            </div>

                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            }
            else
            {
                <div class="empty-result">
                    Start Bookmarking Your Favorite Places!
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="user-request">
            <a href="/signup" class="btn btn-secondary-filled btn-larger-font">
                Sign Up
            </a>
            <a href="/login" class="btn btn-primary-filled btn-larger-font">
                Login
            </a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public StateModel state { get; set; }

    [CascadingParameter]
    public UserModel user { get; set; }

    TabPosition tabPosition = TabPosition.Top;

    List<Amenity> AmenityBookmarks = new List<Amenity>();
    List<Event> EventBookmarks = new List<Event>();

    protected override void OnInitialized()
    {
        state.OnTab = 4;
        PageHistoryState.AddPageToHistory("/bookmarks");
        if (user.Bookmarks != null && user.Bookmarks.Count > 0)
        {
            foreach (Place place in user.Bookmarks)
            {
                if (place is Amenity)
                {
                    AmenityBookmarks.Add((Amenity)place);
                }
                else
                {
                    EventBookmarks.Add((Event)place);
                }
            }
        }
        base.OnInitialized();
    }

    public void UnbookmarkAmenityCallBack(int index)
    {
        Amenity amenityItem = AmenityBookmarks[index];
        Place unbookmark = user.Bookmarks.Find(place => place.Name == amenityItem.Name);
        if (unbookmark != null) user.Bookmarks.Remove(unbookmark);
    }

    public void UnbookmarkEventCallBack(int index)
    {
        Event eventItem = EventBookmarks[index];
        Place unbookmark = user.Bookmarks.Find(place => place.Name == eventItem.Name);
        if (unbookmark != null) user.Bookmarks.Remove(unbookmark);
    }
}