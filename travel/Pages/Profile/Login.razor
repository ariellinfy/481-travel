@page "/login"
@page "/"
@layout PageLayout
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@if (state.JustLogout == true)
    {
        <div class="alert alert-success" role="alert">
            <h4 class="alert-heading">Logout Successful!</h4>
            <p>You have logged out of your account successfully. See the login page below to continue. </p>
        </div>
    }
    
<div class="page-header">
    <h3>Login</h3>   
</div>
<hr>

<EditForm Model="login" OnValidSubmit="ValidateUser">
        <DataAnnotationsValidator />
        <div class="input-box">
            <div class="form-floating mt-3">
                <InputText @bind-Value="login.Email" class="form-control" id="email" placeholder="name@example.com" />
                <label for="email">Email</label>
            </div>
        <ValidationMessage For="() => login.Email" />
        </div>
        <div class="input-box">
            <div class="form-floating mt-3">
                <InputText type="password" @bind-Value="login.Password" class="form-control" id="pw" placeholder="Password" />
                <label for="pw">Password</label>
            </div>
        <ValidationMessage For="() => login.Password" />
        </div>
        <div class="form-controls">
            <input type="submit" class="btn btn-primary-filled" value="Login" />
            <a href="/forgetpassword" type="button" class="btn">Forget Password?</a>
        </div>
    </EditForm>
    <hr />
    <div class="alterns">
        <p> Do not have an account with us? </p>
        <b>Signup or Continue as Guest below!</b>
        <a href="/signup" class="btn btn-secondary-outline">Signup</a>
        <a href="/explore" class="btn" @onclick="Guest">Continue as Guest</a>
    </div>

@code {
    [CascadingParameter]
    public StateModel state { get; set; }

    [CascadingParameter]
    public UserModel user { get; set; }

    private LoginModel login;

    protected override void OnInitialized()
    {
        state.ShowNav = false;
        login = new LoginModel();
        base.OnInitialized();
    }

    private async Task<bool> ValidateUser()
    {
        ((TravelAuthenticationStateProvider)authenticationStateProvider).NotifyUserAuthentication(login.Email);
        state.isGuest = false;
        state.ShowNav = true;
        state.OnTab = 1;
        user.DisplayName = "Testing Robot";
        user.Email = login.Email;
        user.Password = login.Password;
        navigationManager.NavigateTo("/explore");
        await sessionStorage.SetItemAsync("email", user.Email);
        return await Task.FromResult(true);
    }

    public void Guest()
    {
        state.isGuest = true;
        state.ShowNav = true;
        state.OnTab = 1;
        user.ClearUserData();
        state.JustLogout = false;
    }
}


@*        <AuthorizeView>
            <Authorized>
                <p>Welcome @context.User.Identity.Name</p>
                <a href="/login" @onclick="(() => Logout())">Logout</a>
            </Authorized>
            <NotAuthorized>
                <a href="/login"> Login</a>
            </NotAuthorized>
        </AuthorizeView>*@