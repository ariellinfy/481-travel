@page "/event/{id:int}"
@inject HttpClient Http
@inject NavigationManager nav
@inject PageHistoryState PageHistoryState

<PlaceHeaderEvent PageTitle="Event" TargetEvent="@TargetEvent"/>

<img class="images-event" src="@TargetEvent.ImgUrl" alt="@TargetEvent.Name" style="width:100%;">

<div class="event-detail">
    <h3>@TargetEvent.Name</h3>

    <div class="tag-container">
        @if (TargetEvent.Tags != null) {
            @foreach (string tag in @TargetEvent.Tags)
            {
                <Tag TagName="@tag" />
            }
        }
    </div>

    <EventInfo Description="@TargetEvent.Description" Address="@TargetEvent.Address" Time="@TargetEvent.StartTime" Date="@TargetEvent.Date" />

    <h4> Similar Events</h4>

    <div class="list-container">
        @foreach (var similarEvent in similarEvents)
        {
            <EventCard eventId="@similarEvent.id" imgUrl="@similarEvent.ImgUrl"
                   eventName="@similarEvent.Name" eventDate="@similarEvent.Date" eventStart="@similarEvent.StartTime" eventEnd="@similarEvent.EndTime" />
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public StateModel state { get; set; }

    [CascadingParameter]
    public UserModel user { get; set; }

    private List<int> similarEventsId = new List<int> { };
    private List<Event> similarEvents = new List<Event> { };

    public Event TargetEvent { get; set; }

    [Parameter]
    public int id { get; set; }

    private async Task LoadDataAsync()
    {
        similarEvents.Clear();
        TargetEvent = state.AllEvents[id];
        user.Visited.Add(TargetEvent);

        if (TargetEvent.Similar != null)
        {
            for (int i = 0; i < TargetEvent.Similar.Count; i++)
            {
                similarEvents.Add(state.AllEvents[Int32.Parse(TargetEvent.Similar[i])]);
                user.Visited.Add(state.AllEvents[Int32.Parse(TargetEvent.Similar[i])]);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        string currentUrl = "/event/" + id;
        PageHistoryState.AddPageToHistory(currentUrl);
        await LoadDataAsync();
    }
}

<!-- 2 Modal -->
<div class="modal fade" id="addToTripModalToggle" aria-hidden="true" aria-labelledby="addToTripModalToggleLabel" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-end">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="btn btn-setting" data-bs-target="#existingTrips" data-bs-toggle="modal">Existing Trips</button>
                <hr />
                <button type="button" class="btn btn-setting" data-bs-target="#newTrip" data-bs-toggle="modal">Create a New Trip</button>
                <hr />
                <hr />
                <button type="button" class="btn btn-setting btn-cancel" data-bs-dismiss="modal" aria-label="Close">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="existingTrips" aria-hidden="true" aria-labelledby="existingTripsLabel" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-end">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="btn btn-setting" data-bs-target="#tripConflict" data-bs-toggle="modal">Canadian Rockies Trip</button>
                <hr />
                <button type="button" class="btn btn-setting" data-bs-target="#tripSuccess" data-bs-toggle="modal">Winter Shopping</button>
                <hr />
                <hr />
                <button type="button" class="btn btn-setting btn-cancel" data-bs-dismiss="modal" aria-label="Close">Cancel</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="newTrip" aria-hidden="true" aria-labelledby="newTripLabel" tabindex="-1">
    <div id="modal-center" class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-background">
            <div class="modal-body">
                <form class="trip-form">
                    <h5 class="create-option">Create a New Trip</h5>
                    <div class="form-floating mt-3 mb-3">
                        <input type="text" class="form-control" id="tripName" placeholder="unknown" required>
                        <label for="tripName">Trip Name</label>
                    </div>
                    <div class="form-controls modal-footer">
                        <button type="button" class="btn btn-close btn-outline-dark" data-bs-dismiss="modal" aria-label="Close">Close</button>
                        <button type="submit" class="btn btn-save" id="liveToastBtn">Create</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="tripConflict" aria-hidden="true" aria-labelledby="tripConflictLabel" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content ">
            <div class="modal-body modal-info fw-bold" style="color: #f5ad03;">
                <i class="bi bi-x-circle"></i>
                Event timing conflicts with current Trip Plan
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="tripSuccess" aria-hidden="true" aria-labelledby="tripSuccessLabel" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-center">
        <div class="modal-content">
            <div class="modal-body modal-info">
                <i class="bi bi-check-circle"></i>
            </div>
        </div>
    </div>
</div>